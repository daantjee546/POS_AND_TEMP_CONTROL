<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="MAIN" Id="{c14fdddc-a9e2-4b2f-95bf-7a35be57990b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	PIDheater_on  : BOOL;  // PID Controller heater enabled ( Closed looop Control)
	PIDServo_on   : BOOL := TRUE;   // PID Controller heater enabled ( Closed looop Control)
	pidServo      : fBDISCRETE_PID;
	pidHeater     : fBDISCRETE_PID;
	States        : SeqState := SeqState.TO_INIT;
	Cmd_Servo     : R_TRIG;
	Cmd_Heater    : R_TRIG;
	Cmd_ProdStart : R_TRIG;
	Cmd_ProdStop  : R_TRIG;
	
	timerA: TP;
	TimA: F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Handling Buttons
Cmd_ProdStart(clk:=GVL_IO.StartPr);     // Start Process
Cmd_ProdStop(clk:=GVL_IO.StopPr);       // Stop  Process
Cmd_Servo(clk:=GVL_IO.xPushButton1);    // Servo Command button for testing
Cmd_Heater(clk:=GVL_IO.xPushButton2);   // Heater Command button for testing

TimA(clk:=timerA.Q);
timerA();

// ================= START STATE SEQUENCE ======================
//
//   Your State machine program can be programmed here 
//          following an example
//
CASE States OF                       // Sequence State ( ready, etc etc etc )
	//SeqState.Ready:                  // You can change the states if you want for your own convience
	//	GVL_IO.SetPointHeater:= 75;  // Setpoint heater 75 degrees Celsius. 
//	
//SeqState.Fill_A:
		//GVL_IO .ValveA:=TRUE;    //  Open Valve A 	
//	
//

	SeqState.Ready:
	IF GVL_IO.StartPr = TRUE AND GVL_IO.StopPr = FALSE THEN
		GVL_IO.SetPointHeater := 75;
		States := SeqState.Fill_A;
	END_IF
	
	SeqState.TO_INIT:
	GVL_IO.SetPointHeater := 0;
	IF GVL_IO.Output_ServoX > -0.4 AND GVL_IO.Output_ServoX < 0.6 THEN
		PIDServo_on := FALSE;
	ELSE
		GVL_IO.SetPoint_ServoX := 0;
		PIDServo_on := TRUE;
	END_IF
	
	IF GVL_IO.Output_Heater = 0 AND GVL_IO.Level_S1 = TRUE AND GVL_IO.Output_ServoX = 0 THEN
		States := SeqState.Ready;
	END_IF
	
	SeqState.Fill_A:
	GVL_IO.ValveA := TRUE;
	
	IF GVL_IO.Level_S2 = FALSE THEN
		GVL_IO.ValveA := FALSE;
		States := SeqState.Fill_B;
	END_IF
	
	SeqState.Fill_B:
	GVL_IO.ValveB := TRUE;
	PIDheater_on := TRUE;
	GVL_IO.Stirrer := TRUE;
	IF GVL_IO.Level_S3 = FALSE THEN
		GVL_IO.ValveB := FALSE;
		States := SeqState.Heating;
	END_IF
	
	SeqState.Heating:
	IF GVL_IO.Output_Heater > 73.5 AND GVL_IO.Output_Heater < 76.5 THEN
		// turn on timer
		timerA(IN:= TRUE, PT:= T#20S);
		
		// check timer
		IF TimA.Q THEN	
			States := SeqState.ToUnload;
		END_IF
		
	END_IF
	
	SeqState.ToUnload:
	GVL_IO.SetPoint_ServoX := 30;
	PIDServo_on := TRUE;
	
	IF GVL_IO.Output_ServoX > 29.4 AND GVL_IO.Output_ServoX < 30.6 THEN
		PIDServo_on := FALSE;
		PIDheater_on := FALSE;
		States := SeqState.Drain_1;
	END_IF
	
	
	SeqState.Drain_1:
	GVL_IO.ValveC := TRUE;
	IF GVL_IO.Level_S2 = TRUE THEN
		States := SeqState.Drain_2;
	END_IF
	
	SeqState.Drain_2:
	GVL_IO.Stirrer := FALSE;
	IF GVL_IO.Level_S1 = TRUE THEN
		GVL_IO.ValveC := FALSE;
		States := SeqState.TO_INIT;
	END_IF

	
END_CASE
//
//
// ================ END STATE SEQUENCES=========================
// 


// =====   Executing the PID Controllers for  Position and Heater.   ===========
//==================================================================================
//
// *************  Servo with P- Controller only  **************
//
IF (Cmd_Servo.Q AND NOT GVL_IO.xGenCtrl_Error ) THEN
	pidServo.Setpoint:=GVL_IO.SetPoint_ServoX;  // Setpoint Servo
END_IF

pidServo.Kp:= 1;       //  Kp parameter
// pidServo.Ki:= xxx ; //  Ki parameter
// pidServo.Kd:= xxx ; //  Kd parameter 

pidServo.MV_max_sat:= 10;    // Maximum output PID to protect the Servo
pidServo.MV_min_sat:= -10;  // Minimum output PID    ,,     ,,
pidServo.xExt_Error:= Gvl_IO.xGenCtrl_Error;
pidServo.Yprocess:= LREAL_TO_REAL(GVL_IO.Output_ServoX);
//
pidServo(Auto_Mode:=PIDServo_on);  // Calling PID function Heater

// *************   Heater with P- Controller only   **********************
//
IF Cmd_Heater.Q THEN
   pidHeater.Setpoint:=GVL_IO.SetPointHeater;	
END_IF
pidHeater.Kp:= 1;         //  Kp parameter
// pidHeater.Ki:= xx ;    //  Ki parameter     
// pidHeater.Kd:= xx ;    //  Kd parameter      
pidHeater.MV_max_sat:=150;   // Maximum output PID to protect the Heater
pidHeater.MV_min_sat:= -10;  // Minimum output PID ,,     ,,
pidHeater.Yprocess:=GVL_IO.Output_Heater;

pidHeater(Auto_Mode:= PIDheater_on);  // Calling PID function Heater





]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="727" Count="4" />
      <LineId Id="1110" Count="2" />
      <LineId Id="1109" Count="0" />
      <LineId Id="732" Count="12" />
      <LineId Id="805" Count="0" />
      <LineId Id="909" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="1090" Count="0" />
      <LineId Id="1035" Count="1" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1025" Count="0" />
      <LineId Id="1151" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1083" Count="2" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="1086" Count="1" />
      <LineId Id="1046" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1044" Count="0" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1050" Count="0" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1091" Count="3" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1053" Count="0" />
      <LineId Id="1055" Count="1" />
      <LineId Id="1096" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1097" Count="0" />
      <LineId Id="1101" Count="0" />
      <LineId Id="1117" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1115" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1058" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1122" Count="3" />
      <LineId Id="1127" Count="0" />
      <LineId Id="1129" Count="0" />
      <LineId Id="1131" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1065" Count="0" />
      <LineId Id="1132" Count="0" />
      <LineId Id="1066" Count="1" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1133" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1134" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="745" Count="22" />
      <LineId Id="769" Count="13" />
      <LineId Id="784" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>